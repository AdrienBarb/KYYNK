datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String     @id @default(cuid())
  pseudo         String     @unique
  slug           String     @unique
  email          String     @unique
  password       String
  description    String?
  profileImageId String?
  age            Int?
  gender         String?
  bodyType       String?
  hairColor      String?
  country        String?
  tags           String[]   @default([])
  isArchived     Boolean    @default(false)
  preferences    String[]   @default([])
  userType       UserType?  @default(member)
  userToken      UserToken?
  medias         Media[]
  nudes          Nude[]
  creditsAmount  Int        @default(0)
  lastLogin      DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  salesAsSeller  Sale[]     @relation("SellerSales")
  salesAsBuyer   Sale[]     @relation("BuyerSales")
}

model UserToken {
  id        String   @id @default(cuid())
  token     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Nude {
  id          String   @id @default(cuid())
  description String
  fiatPrice   Int
  creditPrice Int
  currency    String
  tags        String[] @default([])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  media       Media?
  buyers      String[] @default([])
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Media {
  id          String   @id @default(cuid())
  thumbnailId String?  @unique
  videoId     String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  nude        Nude?    @relation(fields: [nudeId], references: [id], onDelete: Cascade)
  nudeId      String?  @unique
  isReady     Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Sale {
  id            String   @id @default(cuid())
  creditAmount  Int
  type          SaleType
  isPaid        Boolean  @default(false)
  availableDate DateTime @default(dbgenerated("now() + interval '7 days'"))
  seller        User     @relation("SellerSales", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId      String
  buyer         User     @relation("BuyerSales", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum UserType {
  member
  creator
}

enum SaleType {
  nude
  tip
  message
}
